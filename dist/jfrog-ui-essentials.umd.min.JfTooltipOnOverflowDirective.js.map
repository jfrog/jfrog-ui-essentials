{"version":3,"sources":["webpack://jfrog-ui-essentials/./src/plugins/JFrogUI/Ng1AttributeDirectiveAdapter.js","webpack://jfrog-ui-essentials/./src/directives/JfTooltipOnOverflowDirective.js"],"names":["Ng1AttributeDirectiveAdapter","linkFn","scopeDef","VueFactory","getInstance","Vue","el","binding","vnode","scope","entries","forEach","entry","camelCase","name","modifiers","bind","Object","defineProperty","get","context","expression","attributes","getNamedItem","kebabCase","value","ni","$data","thisObj","$inject","injections","prototype","$jfrog","injectOn","bindedFn","attrs","isFunction","trim","values","attr","$observe","path","cb","$watch","console","error","$","require","$sanitize","sanitizeMixin","methods","ng1LinkFunction","$scope","$element","$attrs","shouldSanitize","on","e","targets","target","tooltipShown","isNoTooltip","cell","classList","contains","i","length","targetContent","children","text","scrollWidth","Math","round","innerWidth","hasClass","options","animation","contentAsHTML","trigger","onlyOne","interactive","position","theme","content","trustTooltipText","tooltipster","opts","html","patchedLinkFn","patchLinkFunction","this"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.JfTooltipOnOverflowDirective.js","sourcesContent":["import $ from 'jquery';\nimport entries from 'lodash/toPairs';\nimport values from 'lodash/values';\nimport camelCase from 'lodash/camelCase';\nimport kebabCase from 'lodash/kebabCase';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport trim from 'lodash/trim';\nimport {VueFactory} from \"../../services/VueFactory\";\n\nexport class Ng1AttributeDirectiveAdapter {\n    static patchLinkFunction(linkFn, scopeDef) {\n        const { Vue } = VueFactory.getInstance();\n\n        return function(el, binding, vnode) {\n            let scope;\n            if (scopeDef) {\n                scope = {};\n                entries(scopeDef).forEach(entry => {\n                    if (entry[0] === camelCase(binding.name)) {\n                        if (entry[1] === '=' || binding.modifiers.bind) {\n                            Object.defineProperty(scope, entry[0], {\n                                get() {\n                                    return get(vnode.context, binding.expression);\n                                }\n                            })\n                        }\n                        else {\n                            scope[entry[0]] = binding.expression;\n                        }\n                    }\n                    else {\n                        Object.defineProperty(scope, entry[0], {\n                            get() {\n                                if (entry[1] === '=') {\n                                    return get(vnode.context, el.attributes.getNamedItem(kebabCase(entry[0])).value);\n                                }\n                                else {\n                                    let ni = el.attributes.getNamedItem(kebabCase(entry[0]));\n                                    return ni ? ni.value : null;\n                                }\n                            }\n                        })\n                    }\n                })\n            }\n            else {\n                scope = vnode.context.$data;\n            }\n\n            let thisObj = {\n                $inject: (...injections) => {\n                    Vue.prototype.$jfrog.injectOn(thisObj, ...injections);\n                }\n            }\n            let bindedFn = linkFn.bind(thisObj);\n\n            let attrs = {};\n            if (binding.modifiers.bind) {\n                Object.defineProperty(attrs, camelCase(binding.name), {\n                    get() {\n                        if (!isFunction(binding.value)) {\n                            return get(vnode.context, trim(binding.expression, '\\''));\n                        }\n                        else {\n                            return binding.value();\n                        }\n                    }\n                })\n            }\n            else {\n                attrs[camelCase(binding.name)] = trim(binding.expression, '\\'');\n            }\n\n            values(el.attributes).forEach(attr => {\n                Object.defineProperty(attrs, camelCase(attr.name), {\n                    get() {\n                        return attr.value;\n                    }\n                })\n            });\n\n            attrs.$observe = (path, cb) => {\n                if (path === camelCase(binding.name)) {\n                    vnode.context.$watch(!isFunction(binding.value) ? binding.expression : binding.value, () => {\n                        if (get(vnode.context, trim(binding.expression, '\\''))) {\n                            cb(get(vnode.context, trim(binding.expression, '\\'')));\n                        }\n                        else if (isFunction(binding.value)) {\n                            cb(binding.value())\n                        }\n                    })\n                }\n                else {\n                    console.error('!!!!!!!!')\n                }\n            }\n\n            bindedFn(scope, $(el), attrs);\n\n        }\n\n    }\n}\n","import {Ng1AttributeDirectiveAdapter} from '@/plugins/JFrogUI/Ng1AttributeDirectiveAdapter';\nimport sanitizeMixin from '../mixins/Sanitize';\nimport 'jf-tooltipster/css/tooltipster.css';\nrequire('jf-tooltipster/js/jquery.tooltipster');\n\nconst {$sanitize} = sanitizeMixin.methods;\nexport default {\n    bind: function (el, binding, vnode) {\n        const opts = {\n            shouldSanitize: !binding.modifiers.html\n        }\n        let patchedLinkFn = Ng1AttributeDirectiveAdapter.patchLinkFunction(ng1LinkFunction.bind(this, opts), null);\n        patchedLinkFn(el, binding, vnode);\n    }\n};\n\nfunction ng1LinkFunction({shouldSanitize}, $scope, $element, $attrs) {\n    $($element).on('mouseenter', (e) => {\n        let targets = [$($element), $(e.target)];\n        let tooltipShown = false;\n        let isNoTooltip = (cell) => {\n            return (cell[0] && cell[0].classList && cell[0].classList.contains('no-tooltip'));\n        };\n\n        for (let i = 0; !tooltipShown && i < targets.length; i++) {\n            let target = targets[i];\n\n            let targetContent = target.children(':not(:visible)').length ? target.children(':visible')\n                .text()\n                .trim() : target.text().trim();\n            targetContent = (targetContent === '' ? null : targetContent);\n            targetContent = $sanitize(targetContent);\n            if (!isNoTooltip(target) && target[0].scrollWidth > Math.round(target.innerWidth())) {\n                if (!!targetContent && !target.hasClass('tooltipstered')) {\n                    let options = {\n                        animation: 'fade',\n                        contentAsHTML: 'true',\n                        trigger: 'hover',\n                        onlyOne: 'true',\n                        interactive: 'true',\n                        position: 'bottom',\n                        theme: 'tooltipster-default bottom',\n                        content: targetContent\n                    };\n                    if ($scope.trustTooltipText) {\n                        options.contentAsHTML = 'true';\n                    }\n                    target.tooltipster(options);\n                    target.tooltipster('show');\n                } else if (!!targetContent) {\n                    target.tooltipster('enable');\n\n                    if (target.tooltipster('content') != targetContent) {\n                        target.tooltipster('content', targetContent);\n                    }\n                }\n            } else if (target.hasClass('tooltipstered')) {\n                target.tooltipster('disable');\n            }\n        }\n    });\n    /*\n        $scope.$on('$destroy', () => {\n            $($element).off('mouseenter');\n            $($element).off('mouseleave');\n        });\n    */\n}\n\n"],"sourceRoot":""}