{"version":3,"sources":["webpack://jfrog-ui-essentials/./src/components/JfJsTreeWrapComponent/index.vue?0376","webpack://jfrog-ui-essentials/src/components/JfJsTreeWrapComponent/index.vue","webpack://jfrog-ui-essentials/./src/components/JfJsTreeWrapComponent/index.vue?a598","webpack://jfrog-ui-essentials/./src/components/JfJsTreeWrapComponent/index.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","directives","name","rawName","value","hasData","expression","staticClass","domProps","_s","treeHeader","_e","_m","staticRenderFns","component"],"mappings":"+MAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAOT,EAAIU,UAAWC,WAAW,cAAcC,YAAY,6BAA6B,CAAEZ,EAAc,WAAEI,EAAG,MAAM,CAACQ,YAAY,uBAAuB,CAACR,EAAG,MAAM,CAACQ,YAAY,2BAA2BC,SAAS,CAAC,UAAYb,EAAIc,GAAGd,EAAIe,iBAAiBf,EAAIgB,KAAKhB,EAAIiB,GAAG,QACraC,EAAkB,CAAC,WAAa,IAAIlB,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACQ,YAAY,0BAA0B,CAACR,EAAG,MAAM,CAACA,EAAG,MAAM,CAACQ,YAAY,uBCmB3L,G,UAAA,CACE,KAAF,kBACE,MAAF,CACA,WACA,aACA,cAEE,YAAF,CACA,SACA,KACA,WACA,YAEE,KAbF,WAcI,MAAJ,IAEE,QAhBF,WAgBI,IAAJ,OAKI,KAAJ,mDACA,aACA,iBAGE,WAAF,CAAI,aAAJ,gBACE,QAAF,CACI,WADJ,WAEM,MAAN,CACQ,KAAR,CAAU,KAAV,IACQ,SAAR,CACU,qBAAV,EACU,aAAV,EACU,eAAV,EACU,YAAV,GAEQ,SAAR,+CACA,WACA,YACA,KAGI,SAhBJ,WAgBM,IAAN,OACM,KAAN,6BACQ,EAAR,qBACQ,EAAR,kBAAU,OAAV,aACQ,EAAR,aAGI,mBAvBJ,WAuBM,IAAN,OACM,EAAN,6DAEM,EAAN,wDACQ,EAAR,qBAAU,OAAV,iCAEM,EAAN,0DACQ,EAAR,qBAAU,OAAV,kCAGI,UAjCJ,WAiCM,IAAN,OACM,KAAN,kDACM,IAAN,oBAEM,EAAN,wBACQ,GAAR,WACA,yBACA,CACU,IAAV,+BAAY,KAAZ,0BACA,OACY,EAAZ,kBAAc,OAAd,yBAEY,EAAZ,2BAIM,KAAN,mDACM,EAAN,4BAEM,IAAN,kBAIM,OAHA,EAAN,iDACQ,EAAR,aAEA,WAEI,OA1DJ,WA2DM,OAAN,8BAEI,cA7DJ,SA6DA,GAAM,IAAN,OACM,GAAN,YAEM,OAAN,qBACQ,IAAR,KACQ,EAAR,MAAU,eAAV,WAAY,OAAZ,IACQ,IAAR,+BAAU,KAAV,IAaQ,OAZA,EAAR,uCACQ,EAAR,8BAAU,KAAV,QACQ,EAAR,uBACQ,EAAR,8DAAU,KAAV,KACU,QAAV,EACU,UAAV,EACU,UAAV,EACU,SAAV,GAGQ,EAAR,kBAEA,MAGI,eAnFJ,SAmFA,GAAM,IAAN,OACM,EAAN,sBACQ,IAAR,6BACQ,QAAR,6BAEM,EAAN,qBACQ,IAAR,6BACQ,QAAR,0BAEM,EAAN,uBAAQ,IAAR,6DACA,6BACA,IACA,EACA,yBAEA,6BAGM,EAAN,sBAAQ,IAAR,6DACA,6BACA,IACA,EACA,gCAEA,oCAII,sBA/GJ,SA+GA,GACM,IACN,EADA,2BAEA,gBACQ,IAAR,uBACU,GAAV,gCACY,EAAZ,KACY,MAGJ,IAAR,EACU,IAAV,uBACY,GAAZ,sCACc,EAAd,iBACA,GACA,MAIQ,OAAR,GAGM,OADA,EAAN,GACA,GAEI,QAvIJ,WAwIM,OAAN,wCCvL8V,I,YCO1VO,EAAY,eACd,EACApB,EACAmB,GACA,EACA,KACA,WACA,MAIa,aAAAC,E","file":"jfrog-ui-essentials.umd.min.jfJsTreeWrap.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.hasData()),expression:\"hasData()\"}],staticClass:\"jf-js-tree-wrap-container\"},[(_vm.treeHeader)?_c('div',{staticClass:\"tree-browser-header\"},[_c('div',{staticClass:\"tree-browser-header-tabs\",domProps:{\"innerHTML\":_vm._s(_vm.treeHeader)}})]):_vm._e(),_vm._m(0)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tree-element-container\"},[_c('div',[_c('div',{staticClass:\"tree-element\"})])])}]\n\nexport { render, staticRenderFns }","<template>\n\n    <div>\n        <div v-show=\"hasData()\" class=\"jf-js-tree-wrap-container\">\n            <div class=\"tree-browser-header\" v-if=\"treeHeader\">\n                <div class=\"tree-browser-header-tabs\" v-html=\"treeHeader\">\n                </div>\n            </div>\n            <div class=\"tree-element-container\">\n                <div>\n                    <div class=\"tree-element\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n\n<script>\n\n    export default {\n        name: 'jf-js-tree-wrap',\n        props: [\n            'treeData',\n            'treeHeader',\n            'checkboxes'\n        ],\n        'jf@inject': [\n            '$scope',\n            '$q',\n            '$element',\n            '$timeout'\n        ],\n        data() {\n            return {};\n        },\n        mounted() {\n\n            /* (NG2VUE) This was moved from created() to mounted() */\n            /* (NG2VUE) Todo: If any other code in created() depends on this, it should also be moved here. */\n\n            this.$scope.$watch('jfJsTreeWrap.treeData', data => {\n                if (data && !this.built)\n                    this.initTree();\n            });\n        },\n        ng1_legacy: { 'controllerAs': 'jfJsTreeWrap' },\n        methods: {\n            treeConfig() {\n                return {\n                    'core': { 'data': {} },\n                    'checkbox': {\n                        'keep_selected_style': false,\n                        'three_state': true,\n                        'tie_selection': false,\n                        'whole_node': false\n                    },\n                    'plugins': this.checkboxes === true || this.checkboxes === undefined ? [\n                        'wholerow',\n                        'checkbox'\n                    ] : []\n                };\n            },\n            initTree() {\n                this.buildTree().then(() => {\n                    this.registerTreeEvents();\n                    this.$emit('on-ready', { jstree: this.jstree() });\n                    this.built = true;\n                });\n            },\n            registerTreeEvents() {\n                $(this.treeElement).on('select_node.jstree', (e, args) => {\n                });\n                $(this.treeElement).on('check_node.jstree', (e, args) => {\n                    this.$timeout(() => this.$emit('on-state-change'));\n                });\n                $(this.treeElement).on('uncheck_node.jstree', (e, args) => {\n                    this.$timeout(() => this.$emit('on-state-change'));\n                });\n            },\n            buildTree() {\n                this.transformedData = this.transformData(this.treeData);\n                let TreeConfig = this.treeConfig();\n\n                TreeConfig.core.data = (obj, cb) => {\n                    if (obj.id === '#')\n                        cb(this.transformedData);\n                    else {\n                        let children = this.$emit('get-children-func', { node: obj.data.originalObject() });\n                        if (children.then) {\n                            children.then(data => cb(this.transformData(data)));\n                        } else {\n                            cb(children ? this.transformData(children) : []);\n                        }\n                    }\n                };\n                this.treeElement = $(this.$element).find('.tree-element');\n                $(this.treeElement).jstree(TreeConfig);\n\n                let defer = this.$q.defer();\n                $(this.treeElement).on('ready.jstree', e => {\n                    defer.resolve();\n                });\n                return defer.promise;\n            },\n            jstree() {\n                return $(this.treeElement).jstree();\n            },\n            transformData(origData) {\n                if (!origData || !origData.length)\n                    return;\n                return _.map(origData, origItem => {\n                    let item = {};\n                    item.data = { originalObject: () => origItem };\n                    let children = this.$emit('get-children-func', { node: origItem });\n                    item.children = children && (children.length || children.then) ? true : [];\n                    item.text = this.$emit('get-text-func', { node: origItem }) || '';\n                    item.icon = 'jf-tree-no-icon';\n                    item.state = this.getInitialStateFunc ? this.$emit('get-initial-state-func', { node: origItem }) : {\n                        opened: false,\n                        disabled: false,\n                        selected: false,\n                        checked: false\n                    };\n\n                    this.setItemMethods(origItem);\n\n                    return item;\n                });\n            },\n            setItemMethods(item) {\n                item.$isChecked = () => {\n                    let node = this.getTreeNodeByOrigItem(item);\n                    return node ? this.jstree().is_checked(node) : false;\n                };\n                item.$isOpened = () => {\n                    let node = this.getTreeNodeByOrigItem(item);\n                    return node ? this.jstree().is_open(node) : false;\n                };\n                item.$setChecked = (checked = true) => {\n                    let node = this.getTreeNodeByOrigItem(item);\n                    if (node) {\n                        if (checked)\n                            this.jstree().check_node(node);\n                        else\n                            this.jstree().uncheck_node(node);\n                    }\n                };\n                item.$setOpened = (opened = true) => {\n                    let node = this.getTreeNodeByOrigItem(item);\n                    if (node) {\n                        if (opened)\n                            this.jstree().open_node(node, null, false);\n                        else\n                            this.jstree().close_node(node, null, false);\n                    }\n                };\n            },\n            getTreeNodeByOrigItem(origItem) {\n                let treeJSON = this.jstree().get_json();\n                let found;\n                let recursiveFind = arr => {\n                    for (let i = 0; i < arr.length; i++) {\n                        if (arr[i].data.originalObject() === origItem) {\n                            found = arr[i];\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        for (let i = 0; i < arr.length; i++) {\n                            if (arr[i].children && arr[i].children.length) {\n                                found = recursiveFind(arr[i].children);\n                                if (found)\n                                    break;\n                            }\n                        }\n                    }\n                    return found;\n                };\n                recursiveFind(treeJSON);\n                return found;\n            },\n            hasData() {\n                return this.treeData && this.treeData.length;\n            }\n\n        }\n    }\n\n</script>\n\n<style scoped lang=\"less\">\n\n\n\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=72451b3c&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"72451b3c\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}