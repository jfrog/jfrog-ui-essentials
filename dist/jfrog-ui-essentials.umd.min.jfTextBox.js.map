{"version":3,"sources":["webpack://jfrog-ui-essentials/./src/components/JfTextBoxComponent/index.vue?0140","webpack://jfrog-ui-essentials/src/components/JfTextBoxComponent/index.vue","webpack://jfrog-ui-essentials/./src/components/JfTextBoxComponent/index.vue?afe1","webpack://jfrog-ui-essentials/./src/components/JfTextBoxComponent/index.vue","webpack://jfrog-ui-essentials/./src/components/JfTextBoxComponent/index.vue?4650"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_s","content","ready","isOverflowing","style","wrapSeeAll","domProps","seeAllCustomText","on","$event","seeAll","_e","staticRenderFns","component"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.jfTextBox.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"jf-text-box-container\"},[_c('div',{staticClass:\"jf-text-box-content-current\"},[_vm._v(_vm._s(_vm.content)+\" \"),(_vm.ready && _vm.isOverflowing)?_c('span',{staticClass:\"jf-text-box-show-all\",style:({'white-space': _vm.wrapSeeAll ? 'inherit' : 'nowrap'}),domProps:{\"innerHTML\":_vm._s(_vm.seeAllCustomText)},on:{\"click\":function($event){return _vm.seeAll()}}}):_vm._e()]),_c('div',{staticClass:\"jf-text-box-content-full\"}),_c('div',{staticClass:\"jf-text-box-content-stage\"})])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\n    <div>\n        <div class=\"jf-text-box-container\">\n            <div class=\"jf-text-box-content-current\">{{ content }} <span v-if=\"ready && isOverflowing\"\n                      class=\"jf-text-box-show-all\"\n                      :style=\"{'white-space': wrapSeeAll ? 'inherit' : 'nowrap'}\"\n                      @click=\"seeAll()\"\n                      v-html=\"seeAllCustomText\">\n                </span>\n            </div>\n            <div class=\"jf-text-box-content-full\"></div>\n            <div class=\"jf-text-box-content-stage\"></div>\n        </div>\n    </div>\n\n</template>\n\n<script>\n    import SanitizeMixin from \"../../mixins/Sanitize\";\n\n    export default {\n        name: 'jf-text-box',\n        props: [\n            'text',\n            'modalTitle',\n            'seeAllText',\n            'maxLines',\n            'noAction',\n            'customAction'\n        ],\n        'jf@inject': [\n            '$scope',\n            '$element',\n            '$timeout',\n            '$interval',\n            '$compile',\n            '$q',\n            'JfFullTextService'\n        ],\n        mixins:[SanitizeMixin],\n        data() {\n            return {\n                content: null,\n                ready: null,\n                wrapSeeAll: null\n            };\n        },\n        mounted() {\n            this.fullTextElement.text(this.sanitizedText);\n            this.registerResize();\n            setTimeout(() => this.refreshText());\n            this.fullTextModal= this.JfFullTextService\n        },\n        beforeDestroy() {\n            this.deregisterResize();\n        },\n        methods: {\n            registerResize() {\n\n                let appliedRefresh = () => {\n                    this.refreshText();\n                    this.$forceUpdate();\n                }\n                let debouncedRefresh = _.debounce(appliedRefresh, 0, {leading: true});\n                // let throttledRefresh = _.throttle(appliedRefresh, 150, {/*leading: false*/})\n\n                this.onResize = debouncedRefresh;\n\n                $(window).on('resize', this.onResize)\n            },\n            deregisterResize() {\n                $(window).off('resize', this.onResize)\n            },\n            setStageText(text) {\n                this.stageElement.text(text);\n            },\n\n            refreshText() {\n                this.measureLineHeight();\n\n                if (!this.isOverflowing) {\n                    this.content = this.sanitizedText;\n                }\n                else {\n                    this.stageElement.html('');\n                    let words = this.splitText(this.sanitizedText);\n                    let i = 1;\n                    let getNumOfLinesUntil = (index, withSeeAll = true) => {\n                        this.setStageText(_.trimEnd(words.slice(0, index).join('')) + (withSeeAll ? ' ' : ''))\n                        if (withSeeAll) this.stageElement.append($(`  <div class=\"jf-text-box-show-all\">${this.seeAllCustomText}</div>`));\n                        return this.numOfStageRows();\n                    }\n                    while (getNumOfLinesUntil(i) <= this.numOfWholeRows && i <= words.length) {\n                        i++;\n                    }\n\n                    if (getNumOfLinesUntil(i, false) !== getNumOfLinesUntil(i)) {\n                        this.wrapSeeAll = true;\n                    }\n                    else this.wrapSeeAll = false;\n                    /*\n                                let saved = i;\n                                i--;\n                                while (getNumOfLinesUntil(i, false) !== getNumOfLinesUntil(i) && i > 0) {\n                                    console.log('?');\n                                    i--;\n                                }\n\n                                if  (i === 0) {\n                                    i = saved;\n                                    this.wrapSeeAll = true;\n                                }\n                                else this.wrapSeeAll = false;\n                    */\n                    let fit = words.slice(0, i);\n\n                    this.setStageText(_.trimEnd(fit.join('')) + (this.isOverflowing ? ' ' : ''));\n                    if (this.isOverflowing) this.stageElement.append($(`<div class=\"jf-text-box-show-all\">${this.seeAllCustomText}</div>`));\n\n                    let m = 0;\n                    while (this.numOfStageRows() > this.numOfWholeRows && i > m) {\n                        m++;\n\n                        fit = words.slice(0, i - m);\n                        this.setStageText(_.trimEnd(fit.join('')) + (this.isOverflowing ? ' ' : ''));\n                        if (this.isOverflowing) this.stageElement.append($(`<div class=\"jf-text-box-show-all\">${this.seeAllCustomText}</div>`));\n                    }\n                    this.content = _.trimEnd(fit.join(''));\n\n                }\n                this.ready = true;\n                this.$forceUpdate();\n            },\n            numOfStageRows() {\n                let contentHeight = this.stageElement.height();\n                return Math.ceil(contentHeight / this.lineHeight - 0.1);\n            },\n\n            splitText(text) {\n\n                if (this.splitCache) return this.splitCache;\n                else {\n                    let regex = /\\s+/g;\n                    let parts = [];\n                    let match = regex.exec(text);\n                    let lastIndex = 0;\n                    while (match) {\n                        parts.push(text.substr(lastIndex, match.index - lastIndex) + match[0]);\n                        lastIndex = match.index + match[0].length;\n                        match = regex.exec(text);\n                    }\n                    parts.push(text.substr(lastIndex, text.length - lastIndex));\n\n                    parts = _.map(parts, part => {\n                        if (part.length > 16) return part.split('');\n                        else return part;\n                    })\n\n                    parts = _.flatten(parts);\n\n                    this.splitCache = parts;\n                    return parts;\n                }\n\n            },\n\n            measureLineHeight() {\n                this.stageElement.text('*');\n                this.lineHeight = this.stageElement.height();\n                if (this.maxLines) {\n                    this.containerElement.height(parseInt(this.maxLines) * this.lineHeight);\n                }\n            },\n\n            seeAll() {\n                if (this.noAction) return;\n                let text = this.sanitizedText;\n                if (this.customAction) {\n                    this.customAction({text})\n                }\n                else {\n                    let modalInstance = this.fullTextModal.showFullTextModal(text, this.modalTitle || 'Full Text', 500, false, null, 'text-box-show-all-modal');\n                    this.deregisterResize();\n                    modalInstance.result.finally(() => {\n                        setTimeout(() => this.registerResize());\n                    })\n                }\n            }\n\n            /* Getter Elements */\n        },\n        computed: {\n            seeAllCustomText() {\n                return this.seeAllText ? this.$sanitize(this.seeAllText) : '(Show All ...)'\n            },\n            sanitizedText() {\n                return this.$sanitize(this.text);\n            },\n            containerElement: {\n                get: function(){\n                    if (!this.cachedContainerElement) {\n                        this.cachedContainerElement = $(this.$element).find('.jf-text-box-container');\n                    }\n                    return this.cachedContainerElement\n                }\n            },\n            fullTextElement: {\n                get: function() {\n                    if (!this.cachedFullTextElement) {\n                        this.cachedFullTextElement = $(this.$element).find('.jf-text-box-content-full')\n                    }\n                    return this.cachedFullTextElement;\n                }\n            },\n\n            currentTextElement: {\n                get: function() {\n                    if (!this.cachedCurrentTextElement) {\n                        this.cachedCurrentTextElement = $(this.$element).find('.jf-text-box-content-current')\n                    }\n                    return this.cachedCurrentTextElement;\n                }\n            },\n\n            stageElement: {\n                get: function() {\n                    if (!this.cachedStageElement) {\n                        this.cachedStageElement = $(this.$element).find('.jf-text-box-content-stage')\n                    }\n                    return this.cachedStageElement;\n                }\n            },\n\n            containerHeight: {\n                get: function() {\n                    return this.containerElement.height();\n                }\n            },\n\n            containerWidth: {\n                get: function() {\n                    return this.containerElement.width();\n                }\n            },\n\n            numOfWholeRows: {\n                get: function() {\n                    let auto = Math.floor(this.containerHeight / this.lineHeight + 0.1);\n                    return this.maxLines ? Math.min(parseInt(this.maxLines), auto) : auto;\n                }\n            },\n\n            numOfActualRows: {\n                get: function() {\n                    let contentHeight = this.fullTextElement.height();\n                    return Math.ceil(contentHeight / this.lineHeight - 0.1);\n                }\n            },\n\n            numOfVisibleRows: {\n                get: function() {\n                    let contentHeight = this.currentTextElement.height();\n                    return Math.ceil(contentHeight / this.lineHeight - 0.1);\n                }\n            },\n\n            isOverflowing: {\n                get: function() {\n                    return this.numOfActualRows > this.numOfWholeRows;\n\n                }\n            }\n        }\n    }\n\n</script>\n\n<style scoped lang=\"less\">\n.jf-text-box {\n    height: auto;\n    .jf-text-box-container {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        position: relative;\n        .jf-text-box-content-full,\n        .jf-text-box-content-stage,\n        .jf-text-box-content-current {\n            white-space: pre-wrap;\n            width: 100%;\n            word-wrap: break-word;\n            height: 100%;\n        }\n\n    .jf-text-box-content-stage,\n        .jf-text-box-content-full {\n            display: none;\n        }\n        .jf-text-box-show-all {\n            display: inline;\n            font-weight: 800;\n            cursor: pointer;\n        }\n    }\n\n    .text-box-show-all-modal {\n        .modal-body.simple-text {\n            word-wrap: break-word;\n        }\n    }\n}\n\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=530a5424&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=530a5424&scoped=true&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"530a5424\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=530a5424&scoped=true&lang=less&\""],"sourceRoot":""}